<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_tmpplayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init vars
can_jump = false;
spd_scale = 8;

facing = 1;

grav = .25;
hsp=0;
vsp=0;
jmp_speed = -4;  //must be negative

jumping = false;
jump_frames = 0;
jump_frames_max = 30;


// define burst
p_burst = part_type_create();
part_type_shape(p_burst, pt_shape_square);
part_type_orientation(p_burst,0,359,0,5,1);
part_type_size(p_burst, .25,.5, -.05, -.01);
part_type_colour_rgb(p_burst,255,255,128,255,128,255);
part_type_scale(p_burst,1,1);
part_type_direction(p_burst,0,359,0,1);
part_type_life(p_burst,90,165);
part_type_speed(p_burst,5,10,-.1,0);  
part_type_alpha3(p_burst,.5,1,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Process Movement &amp; Bounding Collision
// Get input
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_down = keyboard_check(vk_down);
key_up = -keyboard_check(vk_up);
key_spc = keyboard_check(vk_space);

//react
//vert_move = key_down + key_up;
horz_move = key_left + key_right;

facing = horz_move;


hsp = horz_move * spd_scale;

// horz collision
if (place_meeting(x+hsp,y,obj_wall)){
    while(!place_meeting(x+sign(hsp),y,obj_wall)){
        x+=sign(hsp);
    }   
    hsp=0; 
}

vsp=0;
if(key_spc and (can_jump or jumping)){
    if(jump_frames == 0 and can_jump){
        vsp = jmp_speed;
        can_jump = false;
        jumping = true;
    }
    else if(jump_frames &lt; jump_frames_max and jumping){
        vsp = jmp_speed*spd_scale/4;
        jump_frames++;
    }
    else{
        jumping = false;
    }
}
else{
    jumping = false;
    if(jump_frames &gt; 0){
        jump_frames = 0;
    }   
    vsp += grav * spd_scale*4;
}

// vert collision
if (place_meeting(x,y+vsp,obj_wall)){
    while(!place_meeting(x,y+sign(vsp),obj_wall)){
        y+=sign(vsp);
    }
    vsp=0;
}

x+=hsp;
y+=vsp;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set jumpability

if(place_meeting(x,y+1,obj_wall)){
    can_jump = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// set facing

if(facing != 0){
    image_xscale = facing;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// vomit particle for testing

key_f = keyboard_check_pressed(ord('F'));

if(key_f){
    //puke burst
    //burst particle
    /*burst = part_emitter_create(global.shield_particle);
    part_emitter_region(global.shield_particle, burst, x-5,x+5,y-5,y+y,ps_shape_ellipse,ps_distr_linear);
    part_emitter_burst(global.shield_particle,burst,p_burst,random_range(10,20));*/
    
    part_particles_create(global.shield_particle, x+(image_xscale*64),y, p_burst, random_range(10,20));
}    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
